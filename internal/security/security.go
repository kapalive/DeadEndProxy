// ¬© 2023 Devinsidercode CORP. Licensed under the MIT License.
package security

import (
	"log"
	"net/http"
	"strings"
	"time"
)

// Middleware: Sets secure HTTP headers
func SecurityHeadersMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Strict-Transport-Security", "max-age=31536000; includeSubDomains")
		w.Header().Set("X-Content-Type-Options", "nosniff")
		w.Header().Set("X-Frame-Options", "DENY")
		w.Header().Set("X-XSS-Protection", "1; mode=block")
		w.Header().Set("Referrer-Policy", "strict-origin-when-cross-origin")
		w.Header().Set("Permissions-Policy", "geolocation=(), microphone=()")
		next.ServeHTTP(w, r)
	})
}

// Middleware: Bearer token verification (primitive)
func RequireBearerAuthorization(h http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		auth := r.Header.Get("Authorization")
		if !strings.HasPrefix(auth, "Bearer ") {
			w.WriteHeader(444) // nginx-style custom status
			_, _ = w.Write([]byte("Missing or invalid Bearer token"))
			log.Printf("üö´ Unauthorized request to %s", r.URL.Path)
			return
		}
		h.ServeHTTP(w, r)
	})
}

// TarpitMiddleware: Simulating Latency for Bad Requests
func TarpitMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å IP, User-Agent –∏ —Ç.–ø.
		time.Sleep(1 * time.Second)
		next.ServeHTTP(w, r)
	})
}

// FakeErrorMiddleware: Random Error Substitution (Obfuscation Attacks)
func FakeErrorMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// –¢—É—Ç –º–æ–∂–Ω–æ —Å–ª—É—á–∞–π–Ω–æ –≤–µ—Ä–Ω—É—Ç—å 403, 404, 500 ‚Äî –æ–±–º–∞–Ω–∫–∞
		// –∏–ª–∏ –ø–æ–¥–º–µ–Ω—è—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
		w.Header().Set("Server", "Devinsider Proxy/1.0.0 (Ubuntu)")
		next.ServeHTTP(w, r)
	})
}

// FilterMiddleware: Filter example (blank)
func FilterMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// –í –±—É–¥—É—â–µ–º —Å—é–¥–∞ –ø–æ–π–¥—É—Ç geo-block, referer-check, IP denylist –∏ —Ç.–ø.
		next.ServeHTTP(w, r)
	})
}

// ApplySecurityChain ‚Äî wraps the handler with all the middleware at once
func ApplySecurityChain(h http.Handler, withBearer bool) http.Handler {
	chain := h
	chain = FilterMiddleware(chain)
	chain = FakeErrorMiddleware(chain)
	chain = TarpitMiddleware(chain)
	chain = SecurityHeadersMiddleware(chain)
	if withBearer {
		chain = RequireBearerAuthorization(chain)
	}
	return chain
}
