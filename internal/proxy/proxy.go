package proxy

import (
	"io"
	"log"
	"net/http"
)

// DynamicRouter –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –Ω—É–∂–Ω—ã–π –±—ç–∫–µ–Ω–¥
func DynamicRouter(backend string) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		log.Printf("üì° –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å: %s -> %s", r.URL.Path, backend)

		req, err := http.NewRequest(r.Method, backend+r.URL.Path, r.Body)
		if err != nil {
			http.Error(w, "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞", http.StatusInternalServerError)
			return
		}

		// –ö–æ–ø–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
		req.Header = r.Header

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
		resp, err := http.DefaultClient.Do(req)
		if err != nil {
			http.Error(w, "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±—ç–∫–µ–Ω–¥–æ–º", http.StatusBadGateway)
			return
		}
		defer resp.Body.Close()

		// –ö–æ–ø–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å-–∫–æ–¥ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
		w.WriteHeader(resp.StatusCode)
		io.Copy(w, resp.Body)
	}
}
